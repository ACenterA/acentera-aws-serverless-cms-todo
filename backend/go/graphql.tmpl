AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ACenterA - Simple ToDo application - AppSync

Metadata:
  AWS::ServerlessRepo::Application:
    Name: servereless-todo-app
    Description: 'Complete AWS TODO App integrated with Cognito, multi-factor. Built in Vue.JS using AppSync and Dynamodb.

This solution is great to get started with your first serverless application.'
    Author: 'ACentetrA'
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    SpdxLicenseId: Apache-2.0
    Labels: ['cms','serverless','serverlesscms','acentera','plugins', 'todo']
    HomePageUrl: https://acentera.com/
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/ACenterA/acentera-aws-todo-appsync-vuejs

Outputs:

  AccountId:
    Value:
     Fn::Sub: "${AWS::AccountId}"
    Description: The AccountId for Bootstrap

  WebsiteUrl:
    Value: 
       Fn::Sub: "https://${ServerlessCloudfront.DomainName}/"
    Description: The Admin Panel Default Url

  ApiUrl:
    Value: 
      Fn::Sub: "https://${PluginRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
    Description: The API Url

  ApiId:
    Description: GraphQL API ID
    Value:
      Fn::GetAtt: GraphApi.ApiId

  ApiEndpoint:
    Description: GraphQL API Endpoint
    Value:
      Fn::GetAtt: GraphApi.GraphQLUrl

Parameters:

    SiteKey:
      Description: "ACenterA Site Key from Admin Portal"
      Default: "a2f9b231-88b5-40c9-9f75-cc14f854a7bb"
      Type: String

    SiteDataKey:
      Description: "ACenterA Site Key from Admin Portal"
      Default: "a2f9b231-88b5-40c9-9f75-cc14f854a7bb"
      Type: String

    Secret:
      Type : 'AWS::SSM::Parameter::Value<String>'
      Default: 'acentera-<%STAGE%>-secret'
      NoEcho: True

    JWTSecret:
      Type : 'AWS::SSM::Parameter::Value<String>'
      Default: 'acentera-<%STAGE%>-clientsecret'
      NoEcho: True

    ServerSecret:
      Type : 'AWS::SSM::Parameter::Value<String>'
      Default: 'acentera-<%STAGE%>-serversecret'
      NoEcho: True


    # Custom userpool informations to store in the dynamodb
    UserPoolId:
      Type: String
      Default: ''
      Description: (Optional) Custom UserPoolId

    UserPoolClientId:
      Type: String
      Default: ''
      Description: (Optional) Custom UserPoolClientId

    IdentityPoolId:
      Type: String
      Default: ''
      Description: (Optional) Custom IdentityPoolId

Mappings:
  Cognito:
    Values:
      AuthName: ACenterA
      # Warning !Ref AWS::StackName cannot contains dashes
  Plugin:
    Values:
      Name: <%PLUGIN_NAME%>
      # Warning !Ref AWS::StackName cannot contains dashes

Globals:
  Api:
    Cors:
      AllowHeaders: "'X-Version, Accept, Authorization, Content-Type'"
      AllowMethods: "'GET, POST, OPTIONS, HEAD'"
#      AllowOrigin: "'www.example.com'"

    EndpointConfiguration: REGIONAL
    BinaryMediaTypes:
      # These are equivalent to image/gif and image/png when deployed
      - image~1*
      - image~1gif
      - image~1png
      - image~1jpeg
      - image~1jpg

  Function:
    Environment:
      Variables:
        # Client Secret for JWT Signing # This should be in an SSM Parameter ... ?
#        JWT_SECRET: !ImportValue "acentera:<%STAGE%>:Secret:Client:SecretKey"
#        KEY_ID: !ImportValue "acentera:<%STAGE%>:Secret:KeyId"
        APP_DATA_TABLE_NAME: "acentera-<%STAGE%>-AppData"
        APP_DATA_PERM_TABLE_NAME: "acentera-<%STAGE%>-AppDataPermissions"
        SESSION_TABLE_NAME: "acentera-<%STAGE%>-Sessions"
        STAGE: "<%STAGE%>"
        REGION: 
          Fn::Sub: "${AWS::Region}"
        STACK_NAME:  
          Fn::Sub: "${AWS::StackName}"
        STACK_ID:  
          Fn::Sub: "${AWS::StackId}"
        PLUGIN_NAME: "<%PLUGIN_NAME%>"
        SITE_KEY: 
           Ref: SiteDataKey                                # Data key ie: ssk = X in queries
        SITE: 
           Ref: SiteKey                                    # An Unique SiteKey (or optional to add to the same default site)
        SITE_TITLE: "ServerLess ToDo App"
        JWT_SECRET: 
           Ref: JWTSecret
        KEY_ID: 
           Ref: Secret
        SECRET: 
           Ref: ServerSecret

        # Custom userpool informations to store in the dynamodb
        UserPoolId:
           Ref: UserPoolId
        UserPoolClientId:
           Ref: UserPoolClientId
        IdentityPoolId:
           Ref: IdentityPoolId

        GraphApiId:
          Fn::GetAtt: GraphApi.ApiId
        GraphApiEndpoint:
          Fn::GetAtt: GraphApi.GraphQLUrl

    Handler: main
    Runtime: go1.x
    Timeout: 60
    Layers:
     - Ref: RequestsLayer
#    Tracing: Active

Resources:

  GraphApi:
    Type: AWS::AppSync::GraphQLApi
    Description: <%PLUGIN_NAME%> Graph Api
    Properties:
      AuthenticationType: AWS_IAM # AMAZON_COGNITO_USER_POOLS
      Name: 
        Fn::Sub: ${AWS::StackName}
      #LogConfig:
      #  CloudWatchLogsRoleArn: !GetAtt AppSyncServiceRole.Arn
      #  FieldLogLevel: "ERROR"

  RequestsLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      ContentUri: shared/

  PluginRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowHeaders: "'X-Version, Accept, Authorization, Content-Type'"
        AllowMethods: "'GET, POST, OPTIONS, HEAD'"
  #      AllowOrigin: "'www.example.com'"

      EndpointConfiguration: REGIONAL
      BinaryMediaTypes:
        # These are equivalent to image/gif and image/png when deployed
        - image~1*
        - image~1gif
        - image~1png
        - image~1jpeg
        - image~1jpg
      Auth:
        DefaultAuthorizer: ACenterAuthorizer
        Authorizers:
          ACenterAuthorizer:
            FunctionPayloadType: REQUEST
            # FunctionArn: !GetAtt ACenterAuthorizerFunction.Arn
            # FunctionArn: !ImportValue "acentera:<%STAGE%>:ApiGateway:Authorizer:V1"
            FunctionArn:
               Fn::ImportValue:
                  Fn::Sub: "acentera:<%STAGE%>:ApiGateway:Authorizer:V1"
            # FunctionInvokeRole: !Ref MyRole
            Identity:
              # QueryStrings:
              #   - auth
              # NOTE: Additional options:
              Headers:
                - x-token
              # Authorization
              # StageVariables:
              #   - AUTHORIZATION
              # Context:
              #   - authorization
              # ReauthorizeEvery: 3600 # maximum of 1 hours ...
              # ReauthorizeEvery: 30 # maximum of 1 hours ...

#  ACenterAuthorizerFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: ./src
#      Handler: authorizer.handler
#      Runtime: nodejs8.10

  ApiApp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handlers/app
      Timeout: 60
      Events:
        GetRequest:
          Properties:
            Method: GET
            Path: /api/plugins/serverless-cms/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        PostRequest:
          Properties:
            Method: POST
            Path: /api/plugins/serverless-cms/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        PutRequest:
          Properties:
            Method: PUT
            Path: /api/plugins/serverless-cms/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        DeleteRequest:
          Properties:
            Method: DELETE
            Path: /api/plugins/serverless-cms/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
      # FunctionName: !Sub acentera-${AWS::StackName}-<%STAGE%>-Api
      Runtime: go1.x
      Policies:
         # Use of * due to /index/ for gsi queries...
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData/index/*"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppDataPermissions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-Sessions"

  ApiInternalApp:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handlers/app
      Timeout: 60
      Events:
        GetRequest:
          Properties:
            Method: GET
            Path: /api/internal/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        PostRequest:
          Properties:
            Method: POST
            Path: /api/internal/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        PutRequest:
          Properties:
            Method: PUT
            Path: /api/internal/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
        DeleteRequest:
          Properties:
            Method: DELETE
            Path: /api/internal/{proxy+}
            RestApiId: 
              Ref: PluginRestApi
          Type: Api
      # FunctionName: !Sub acentera-${AWS::StackName}-<%STAGE%>-Api
      Runtime: go1.x
      Environment:
        Variables:
          TYPE: "MODELSWS"
      Policies:
         # Use of * due to /index/ for gsi queries...
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData/index/*"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppDataPermissions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-Sessions"

  ApiPluginSettings:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handlers/app
      Timeout: 60
      Events:
        GetSettings:
          Properties:
            Method: GET
            Path: /api/plugins/serverless-cms/settings
            RestApiId: 
              Ref: PluginRestApi
            Auth:
              Authorizer: NONE
          Type: Api

        PostBootstrap:
          Properties:
            Method: POST
            Path: /api/plugins/serverless-cms/setup/bootstrap
            RestApiId: 
              Ref: PluginRestApi
            Auth:
              Authorizer: NONE
          Type: Api

      # FunctionName: !Sub acentera-${AWS::StackName}-<%STAGE%>-ApiSettinngsBootstrap
      Runtime: go1.x
      Policies:
        # Use of * due to /index/ for gsi queries...
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppDataPermissions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-Sessions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData/index/*"


  # # # # # # # # # # # # # # # # #
  # Publicly accessible endpoints #
  # # # # # # # # # # # # # # # # #
  #TODO: Enable anonymous sessions ie: to support carts for guests
  PublicWebsite:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handlers/app
      Timeout: 30
      Environment:
        Variables:
          TYPE: "WEBSITE"
      Events:
        Request:
          Type: Api
          Properties:
            Method: GET
            RestApiId: 
              Ref: PluginRestApi
            Path: /api/plugins/serverless-cms/static/{proxy+}
            Auth:
              Authorizer: NONE
      FunctionName: 
          Fn::Sub: "acentera-${AWS::StackName}-PublicWebsite"
      Runtime: go1.x

# # # # # # # # # # # # # # # # # # #
# Cloud Front configuration         #
# # # # # # # # # # # # # # # # # # #
  ServerlessCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
       - PluginRestApi
       # - AddSiteExecute
       # - AddPluginSiteExcute
    Properties:
      DistributionConfig:
        Comment: Cloudfront Distribution pointing to api gateway static page
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: index.html
        # Aliases:
        # - !Ref 'FullDomainName'
        IPV6Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          Compress: true
          TargetOriginId: Static
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
            Headers: #define explicit headers, since API Gateway doesn't work otherwise
              - Accept
              - Content-Type
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors: #second the behavior for the API Gateway
          - AllowedMethods: #allow all method for the backend to implement
              - GET
              - HEAD
              - OPTIONS
            CachedMethods: #cache only on get requests
              - GET
              - HEAD
              - OPTIONS
            DefaultTTL: 60
            MinTTL: 60
            MaxTTL: 300
            Compress: true
            ForwardedValues:
              Headers: #define explicit headers, since API Gateway doesn't work otherwise
                - Accept
                - Referer
                - Athorization
                - Content-Type
                - Access-Control-Allow-Headers
              QueryString: true #to transfer get parameters to the gateway
            PathPattern: 
               Fn::Sub: "/api/plugins/<%PLUGIN_NAME%>/static/*" # Path pattern after the Gateway stage identifier.
            TargetOriginId:
               Fn::Sub: Plugin-<%PLUGIN_NAME%>-Api" #id of the orignin
            ViewerProtocolPolicy: https-only #API Gateway only support https

          - AllowedMethods: #allow all method for the backend to implement
              - GET
              - HEAD
              - OPTIONS
            CachedMethods: #cache only on get requests
              - GET
              - HEAD
              - OPTIONS
            DefaultTTL: 60
            MinTTL: 60
            MaxTTL: 300
            Compress: true
            ForwardedValues:
              Headers: #define explicit headers, since API Gateway doesn't work otherwise
                - Accept
                - Referer
                - Athorization
                - Content-Type
                - Access-Control-Allow-Headers
              QueryString: true #to transfer get parameters to the gateway
            PathPattern: 
               Fn::Sub: "/api/plugins/<%PLUGIN_NAME%>/static*" #path pattern after the Gateway stage identifier.
            TargetOriginId: 
               Fn::Sub: "Plugin-<%PLUGIN_NAME%>-Api" # id of the orignin
            ViewerProtocolPolicy: https-only #API Gateway only support https

          - AllowedMethods: #allow all method for the backend to implement
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods: #cache only on get requests
              - GET
              - HEAD
              - OPTIONS
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            Compress: true
            ForwardedValues:
              Headers: #define explicit headers, since API Gateway doesn't work otherwise
                - Accept
                - Referer
                - Athorization
                - Content-Type
                - Token
                - Access-Control-Allow-Headers
                - X-Token
              QueryString: true #to transfer get parameters to the gateway
            PathPattern: 
               Fn::Sub: "/api/plugins/<%PLUGIN_NAME%>/*" #path pattern after the Gateway stage identifier.
            TargetOriginId: 
               Fn::Sub: "Plugin-<%PLUGIN_NAME%>-Api" #id of the orignin
            ViewerProtocolPolicy: https-only #API Gateway only support https

          - AllowedMethods: #allow all method for the backend to implement
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods: #cache only on get requests
              - GET
              - HEAD
              - OPTIONS
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            Compress: true
            ForwardedValues:
              Headers: #define explicit headers, since API Gateway doesn't work otherwise
                - Accept
                - Referer
                - Athorization
                - Content-Type
                - Token
                - Access-Control-Allow-Headers
                - X-Token
              QueryString: true #to transfer get parameters to the gateway
            PathPattern: "/api/*" #path pattern after the Gateway stage identifier.
            TargetOriginId: Api #id of the orignin
            ViewerProtocolPolicy: https-only #API Gateway only support https
        Origins:
          # Warning ordering is important.
          # Add plugin first then add the default core api's
          # Add Current API Gateway Plugin
          # This also serves the static endpoints..
          - DomainName: 
               Fn::Sub:
                  - "${RESTAPI}.execute-api.${AWS::Region}.amazonaws.com"
                  - RESTAPI: 
                      Ref: PluginRestApi
            Id:
              Fn::Sub: "Plugin-<%PLUGIN_NAME%>-Api"

            CustomOriginConfig:
              OriginReadTimeout: 60
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: "X-Site"
                HeaderValue: 
                   Ref: SiteKey
              - HeaderName: "X-Plugin"
                HeaderValue: "<%PLUGIN_NAME%>"
            OriginPath: "/Prod"

          - DomainName:
               Fn::ImportValue:
                  Fn::Sub: "acentera:<%STAGE%>:ApiGateway:DomainName"
            Id: Api
            CustomOriginConfig:
              OriginReadTimeout: 60
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: "X-Site"
                HeaderValue: 
                  Ref: SiteKey
              - HeaderName: "X-Plugin"
                HeaderValue: "<%PLUGIN_NAME%>"
            OriginPath: '/Prod'

          - DomainName:
               Fn::ImportValue:
                  Fn::Sub: "acentera:<%STAGE%>:ApiGateway:DomainName"
            Id: Static
            CustomOriginConfig:
              OriginReadTimeout: 60
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: "X-Site"
                HeaderValue: 
                  Ref: SiteKey
              - HeaderName: "X-Plugin"
                HeaderValue: "<%PLUGIN_NAME%>"
            OriginPath: '/Prod/static'

        PriceClass: PriceClass_100
      Tags:
        - Key: 'acentera:id'
          Value: 
            Fn::Sub: '<%PLUGIN_NAME%>-${SiteKey}'
        - Key: 'environment'
          Value: 
            Fn::Sub: '<%STAGE%>'


  # Limit actions by cognito groups or iam auth example ...
  # https://docs.aws.amazon.com/appsync/latest/devguide/security.html#aws-iam-authorization
  AppSyncSchema:
    DependsOn:
    - GraphApi
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: 
        Fn::GetAtt: 'GraphApi.ApiId'
      DefinitionS3Location: schema.graphql

  ModelLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./handlers/app
      Runtime: go1.x
      Environment:
        Variables:
          TYPE: "MODELS"
      Policies:
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppDataPermissions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-Sessions"
         - DynamoDBCrudPolicy:
            TableName: "acentera-<%STAGE%>-AppData/index/*"

  AppSyncModelDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: 
        Fn::GetAtt: 'GraphApi.ApiId'
      Name:
         Fn::Sub: "acentera_model"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: 
          Fn::GetAtt: "ModelLambda.Arn"
      ServiceRoleArn: 
          Fn::ImportValue:
            Fn::Sub: "acentera:<%STAGE%>:AppSync:WriterRole"

  AppSyncModelProjectDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: 
        Fn::GetAtt: 'GraphApi.ApiId'
      Name: 
         Fn::Sub: "acentera_model_projects"
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: 
           Fn::GetAtt: "ModelLambda.Arn"
      ServiceRoleArn: 
         Fn::ImportValue:
            Fn::Sub: "acentera:<%STAGE%>:AppSync:WriterRole"

{{ with .Queries }}
  {{ range . }}
  AppSyncModel{{ .Name | Title }}Queries:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: 'GraphApi.ApiId'
      TypeName: Query
      FieldName: {{ .Name }}
      DataSourceName:
        Fn::GetAtt: "AppSyncModelDataSource.Name"
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": { "resolve": "query.{{ .Name }}", "context": $utils.toJson($context) } }'
      ResponseMappingTemplate: '$util.toJson($context.result)'
  {{ end }} 
{{ end }}


{{ with .Mutations }}
  {{ range . }}
  AppSyncModel{{ .Name | Title }}Mutations:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId:
        Fn::GetAtt: 'GraphApi.ApiId'
      TypeName: Mutation
      FieldName: {{ .Name }}
      DataSourceName:
        Fn::GetAtt: "AppSyncModelDataSource.Name"
      RequestMappingTemplate: '{ "version" : "2017-02-28", "operation": "Invoke", "payload": { "resolve": "mutation.{{ .Name }}", "context": $utils.toJson($context) } }'
      ResponseMappingTemplate: '$util.toJson($context.result)'
  {{ end }} 
{{ end }}

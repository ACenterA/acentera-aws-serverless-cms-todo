
input CreateProjectInput {
  title: String!
  status: String!
}

input UpdateProjectInput {
  id: ID!
  title: String!
  status: String!
}

input DeleteProjectInput {
  id: ID!
}

type Mutation {
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
}

type Query {
  listAllProjects: ProjectConnection!
  listProjects(limit: Int, nextToken: String): ProjectConnection!
}

enum ProjctStatusType {
    active
    inactive
    deleted
}
# TODO Add ProjectStatusType As enum
type Project {
  id: ID!
  title: String!
  status: String!
  created: AWSDateTime
  updated: AWSDateTime
}

type ProjectConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Project!]!
  nextToken: String
}

type Subscription {
  onCreateProject(id: ID, title: String, status: String): Project
  onUpdateProject(id: ID, title: String, status: String): Project
  onDeleteProject(id: ID, title: String, status: String): Project
}

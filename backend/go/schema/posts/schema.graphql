nativetype Post {
    # You may override the model
    # model: posts
    plurial: Posts
    singular: post
    version: 1

    # The parent field input parameters also used for GSI
    parent: project

    # When creating a Post it will update the metadata based on the lang value
    # It will use the id passed (will be empty if, its a new one)
    # If its a new language, the id of the post must be passed, else threated as a new one...
    one_to_many: lang
    one_to_many_update_parent_fields: upk
}

# what about languages?
interface PostInterface {
  author_name: String!
}

# PostListing should not have N+1 Queries ...
type PostListing implements BaseObject & PostInterface {
  languages: [LangEnum!]
}

type Post implements BaseObject & PostInterface {
  lang: LangEnum!
  translations(lang: LangEnum): PostMetadataConnection
  comments(lang: LangEnum, limit: Int, nextToken: String): PostCommentConnection
  categories: [String]
  tags: [String]
  views: Int
  author: User!
}


type UserPost {
  post: Post!
  user: User!
}

type UserPostConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Post]!
  lang: LangEnum
  nextToken: String
}

input CreatePostInput {
  project: String!
  lang: String
  author: String
  title: String
  content: String
  description: String
}

input UpdatePostInput {
  id: ID!
  title: String
  completed: Boolean
}

input DeletePostInput {
  id: ID!
}

input ListPostsInput {
  project: String
  lang: LangEnum
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostOutput
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
}

type CreatePostOutput {
  userPost: UserPost
  query: Query
}

type Query {
  getPost(id: ID!): Post

  # listPosts should return a PostConnection that ony have a userId (prevent N+1 Loops)
  listPosts(input: ListPostsInput, limit: Int, nextToken: String): PostConnection!
}

### POSTS
# Get next scheduled posts ... to proceed
# Get Latest Posts by Type ( published, scheduled, draft ..)
# For a User get the Posts that he has ( Created, Interacted, Viewed )
#

enum UserPostConnectionType {
    created
    interacted
    viewed
}

enum PostStatusType {
    published
    draft
    scheduled
}

type PostMetadataConnection {
  id: ID!
  title: String!
  slug: String!
  content: String!
  description: String!
  status: String!
  published: AWSDateTime
  views: Int
}

type Comment {
  id: ID!
  postId: String!
  lang: LangEnum!
  author: String!
  content: String!
  upvotes: Int
  downvotes: Int
}

type PostCommentConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Comment]!
  nextToken: String
}

type Category {
  id: ID!
  title: String!
  status: String!
  completed: String!
  created: AWSDateTime
  updated: AWSDateTime
  categories: [String]!
}

# Return a PostListing limit N+1 Queries
type PostConnection {
  items: [PostListing!]!
  nextToken: String
}

type Subscription {
  onCreatePost(id: ID, title: String, completed: Boolean): CreatePostOutput
  onUpdatePost(id: ID, title: String, completed: Boolean): PostInterface
  onDeletePost(id: ID, title: String, completed: Boolean): PostInterface
}

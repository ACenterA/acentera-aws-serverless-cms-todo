nativetype Task {
    plurial: Tasks
    singular: task
    version: 1
}

type UserTasks {
  tasks: Tasks!
  user: User!
}

type UserTaskConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Tasks]!
  lang: LangEnum
  nextToken: String
}

input CreateTaskInput {
  project: String!
  lang: String
  author: String
  title: String
  content: String
  description: String
}

input UpdateTaskInput {
  id: ID!
  title: String
  completed: Boolean
}

input DeleteTaskInput {
  id: ID!
}

type Mutation {
  createTasks(input: CreateTaskInput!): CreateTasksOutput
  updateTasks(input: UpdateTaskInput!): Tasks
  deleteTasks(input: DeleteTaskInput!): Tasks
}

type CreateTasksOutput {
  userTasks: UserTasks
  query: Query
}

type Query {
  getTask(id: ID!): Tasks

  # listTasks should return a TasksConnection that ony have a userId (prevent N+1 Loops)
  listTasks(project: String, lang: LangEnum, limit: Int, nextToken: String): TasksConnection!
}

### Tasks
# Get next scheduled Tasks ... to proceed
# Get Latest Tasks by Type ( published, scheduled, draft ..)
# For a User get the Tasks that he has ( Created, Interacted, Viewed )
#

enum UserTasksConnectionType {
    created
    interacted
    viewed
}

enum TaskstatusType {
    published
    draft
    scheduled
}

# what about languages?
interface TasksInterface {
  id: ID!
  title: String!
  author_name: String!
  created: AWSDateTime
  updated: AWSDateTime
}

# TasksListing should not have N+1 Queries ...
type TasksListing implements TasksInterface {
  author_name: String!
}

type Tasks implements TasksInterface {
  author_p: String!
}

# Return a TasksListing limit N+1 Queries
type TasksConnection {
  items: [TasksListing!]!
  nextToken: String
}

type Subscription {
  onCreateTasks(id: ID, title: String, completed: Boolean): CreateTasksOutput
  onUpdateTasks(id: ID, title: String, completed: Boolean): TasksInterface
  onDeleteTasks(id: ID, title: String, completed: Boolean): TasksInterface
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getAuthor(input: ID!): Author
  batchgetAuthtor(input: [ID]!): [Author]!
  listAllAuthors: AuthorConnection!
  listAuthors(
    input: ListAuthorsInput!
    limit: Int
    nextToken: String
  ): AuthorConnection!
  getPost(id: ID!): Post
  listPosts(
    input: ListPostsInput
    limit: Int
    nextToken: String
  ): PostConnection!
  listAllProjects: ProjectConnection!
  listProjects(limit: Int, nextToken: String): ProjectConnection!
  getTask(id: ID!): Tasks
  listTasks(
    project: String
    lang: LangEnum
    limit: Int
    nextToken: String
  ): TasksConnection!
  getUserPublicInfo(input: ID!): UserPublic
  batchgetUserPublicInfo(input: [ID]!): [UserPublic]!
  listUsers(
    input: ListUsersSearchInput
    limit: Int
    nextToken: String
  ): UserConnection!
  listAllUsers: UserConnection!
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostOutput
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
  createProject(input: CreateProjectInput!): Project
  updateProject(input: UpdateProjectInput!): Project
  deleteProject(input: DeleteProjectInput!): Project
  createTasks(input: CreateTaskInput!): CreateTasksOutput
  updateTasks(input: UpdateTaskInput!): Tasks
  deleteTasks(input: DeleteTaskInput!): Tasks
}

type Subscription {
  onCreatePost(
    id: ID
    title: String
    completed: Boolean
  ): CreatePostOutput
  onUpdatePost(
    id: ID
    title: String
    completed: Boolean
  ): PostInterface
  onDeletePost(
    id: ID
    title: String
    completed: Boolean
  ): PostInterface
  onCreateProject(
    id: ID
    title: String
    status: String
  ): Project
  onUpdateProject(
    id: ID
    title: String
    status: String
  ): Project
  onDeleteProject(
    id: ID
    title: String
    status: String
  ): Project
  onCreateTasks(
    id: ID
    title: String
    completed: Boolean
  ): CreateTasksOutput
  onUpdateTasks(
    id: ID
    title: String
    completed: Boolean
  ): TasksInterface
  onDeleteTasks(
    id: ID
    title: String
    completed: Boolean
  ): TasksInterface
}

type Author implements BaseObject {
  userid: String!
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
}

type AuthorConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Author!]!
  nextToken: String
}

type S3Object {
  bucket: String
  key: String
  region: String
}

type PostListing implements BaseObject & PostInterface {
  languages: [LangEnum!]
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  author_name: String!
}

type Post implements BaseObject & PostInterface {
  lang: LangEnum!
  translations(lang: LangEnum): PostMetadataConnection
  comments(
    lang: LangEnum
    limit: Int
    nextToken: String
  ): PostCommentConnection
  categories: [String]
  tags: [String]
  views: Int
  author: User!
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  author_name: String!
}

type UserPost {
  post: Post!
  user: User!
}

type UserPostConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Post]!
  lang: LangEnum
  nextToken: String
}

type CreatePostOutput {
  userPost: UserPost
  query: Query
}

type PostMetadataConnection {
  id: ID!
  title: String!
  slug: String!
  content: String!
  description: String!
  status: String!
  published: AWSDateTime
  views: Int
}

type Comment {
  id: ID!
  postId: String!
  lang: LangEnum!
  author: String!
  content: String!
  upvotes: Int
  downvotes: Int
}

type PostCommentConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Comment]!
  nextToken: String
}

type Category {
  id: ID!
  title: String!
  status: String!
  completed: String!
  created: AWSDateTime
  updated: AWSDateTime
  categories: [String]!
}

type PostConnection {
  items: [PostListing!]!
  nextToken: String
}

type Project implements BaseObject {
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
}

type ProjectConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Project!]!
  nextToken: String
}

type UserTasks {
  tasks: Tasks!
  user: User!
}

type UserTaskConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [Tasks]!
  lang: LangEnum
  nextToken: String
}

type CreateTasksOutput {
  userTasks: UserTasks
  query: Query
}

type TasksListing implements BaseObject & TasksInterface {
  author_name: String!
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
}

type Tasks implements BaseObject & TasksInterface {
  author_p: String!
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
  author_name: String!
}

type TasksConnection {
  items: [TasksListing!]!
  nextToken: String
}

type UserPublic {
  id: ID!
  title: String!
  display_name: String
}

type UserConnection {
  before: String
  after: String
  hasAfter: Boolean
  hasBefore: Boolean
  items: [User!]!
  nextToken: String
}

type User implements BaseObject {
  posts(
    limit: Int
    type: UserPostConnectionType
    nextToken: String
  ): UserPostConnection
  profilePicture: S3Object
  email: String
  display_name: String
  firstName: String
  lastName: String
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
}


enum LangEnum {
  fr
  en
}

enum UserPostConnectionType {
  created
  interacted
  viewed
}

enum PostStatusType {
  published
  draft
  scheduled
}

enum ProjctStatusType {
  active
  inactive
  deleted
}

enum UserTasksConnectionType {
  created
  interacted
  viewed
}

enum TaskstatusType {
  published
  draft
  scheduled
}

interface BaseObject {
  id: ID!
  title: String!
  status: String
  created: AWSDateTime
  updated: AWSDateTime
}

interface PostInterface {
  author_name: String!
}

interface TasksInterface {
  id: ID!
  title: String!
  author_name: String!
  created: AWSDateTime
  updated: AWSDateTime
}

input ListAuthorsInput {
  project: String!
}

input S3ObjectInput {
  bucket: String!
  key: String!
  region: String!
}

input CreatePostInput {
  project: String!
  lang: String
  author: String
  title: String
  content: String
  description: String
}

input UpdatePostInput {
  id: ID!
  title: String
  completed: Boolean
}

input DeletePostInput {
  id: ID!
}

input ListPostsInput {
  project: String
  lang: LangEnum
}

input CreateProjectInput {
  title: String!
  status: String!
}

input UpdateProjectInput {
  id: ID!
  title: String!
  status: String!
}

input DeleteProjectInput {
  id: ID!
}

input CreateTaskInput {
  project: String!
  lang: String
  author: String
  title: String
  content: String
  description: String
}

input UpdateTaskInput {
  id: ID!
  title: String
  completed: Boolean
}

input DeleteTaskInput {
  id: ID!
}

input ListUsersSearchInput {
  name: String
  email: String
}
